---
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  Terminal,
  PartyPopper,
  Info,
  TriangleAlert,
  Skull,
  type LucideIcon,
} from "lucide-react";
import { Button } from "@/components/ui/button";

type Variant = "info" | "warning" | "danger" | "success";

interface Props {
  variant?: Variant;
  title?: string;
  icon?: LucideIcon; // Optional custom icon prop
}

const { variant, title, icon: CustomIcon } = Astro.props as Props;

const variants: Record<Variant, string> = {
  info: "border-info bg-info text-info-foreground hover:bg-info cursor-default",
  warning: "border-warning bg-warning text-warning-foreground hover:bg-warning cursor-default",
  danger: "border-destructive bg-destructive text-destructive-foreground hover:bg-destructive cursor-default",
  success: "border-success bg-success text-success-foreground hover:bg-success cursor-default",
};

const variantIcons: Record<Variant, LucideIcon> = {
  info: Info,
  warning: TriangleAlert,
  danger: Skull,
  success: PartyPopper,
};

const defaultTitles: Record<Variant, string> = {
  info: "Info",
  warning: "Watch Out",
  danger: "Danger",
  success: "Success",
};

// Check if the provided variant is valid; otherwise, use 'info' as the default
const validVariant = variant && variants[variant] ? variant : "info";

const Icon = CustomIcon || variantIcons[validVariant];
const alertTitle = title || defaultTitles[validVariant];
const alertClasses = variants[validVariant];

---

<div class="callout py-2 w-full">
  <Alert className={`flex flex-row items-start gap-2 ${alertClasses}`}>
    <Button variant="ghost" size="icon" className=`${alertClasses}`>
      <Icon className="h-[1.2rem] w-[1.2rem]" />
    </Button>
    <div>
      <AlertTitle className="m-0">{alertTitle}</AlertTitle>
      <AlertDescription>
        <slot />
      </AlertDescription>
    </div>
  </Alert>
</div>
